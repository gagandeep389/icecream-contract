// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Token is ERC20, Ownable {
    event LogMessage(string message);
    event IceCreamConverted(address indexed account, string iceCreamFlavor, uint256 quantity);

    mapping(string => uint256) public iceCreamPrices;
    mapping(string => uint256) public iceCreamStocks;

    constructor() ERC20("CustomToken", "CTK") Ownable(msg.sender) {
        // Initialize token with a total supply of 100 tokens
        _mint(msg.sender, 0);

        // Initialize ice cream prices and stocks
        iceCreamPrices["Vanilla"] = 5;
        iceCreamStocks["Vanilla"] = 50;

        iceCreamPrices["Chocolate"] = 7;
        iceCreamStocks["Chocolate"] = 40;

        iceCreamPrices["Strawberry"] = 6;
        iceCreamStocks["Strawberry"] = 45;

        iceCreamPrices["Mint"] = 8;
        iceCreamStocks["Mint"] = 30;
    }

    function mintTokens(address account, uint256 tokens) public onlyOwner {
        _mint(account, tokens);
    }

    function burnTokens(uint256 tokens) public {
        require(balanceOf(msg.sender) >= tokens, "Insufficient funds for burning tokens");
        _burn(msg.sender, tokens);
        emit LogMessage("Tokens burned successfully");
    }

    function transferTokens(address recipient, uint256 tokens) external {
        require(balanceOf(msg.sender) >= tokens, "Insufficient funds for transferring tokens");
        _transfer(msg.sender, recipient, tokens);
    }

    function redeemIceCream(string memory flavor, uint256 quantity) external {
        require(bytes(flavor).length > 0, "Ice cream flavor cannot be empty");
        require(quantity > 0, "Quantity must be greater than zero");

        uint256 totalPrice = iceCreamPrices[flavor] * quantity;
        require(balanceOf(msg.sender) >= totalPrice, "Not enough funds to redeem ice cream");
        require(iceCreamStocks[flavor] >= quantity, "Not enough ice cream quantity for redemption");

        address user = msg.sender;

        _burn(user, totalPrice);
        iceCreamStocks[flavor] -= quantity;

        emit LogMessage("Ice cream redeemed successfully");
    }

}
